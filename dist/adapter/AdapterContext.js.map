{"version":3,"file":"AdapterContext.js","sourceRoot":"","sources":["../../src/adapter/AdapterContext.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;GAaG;;AAWH;;GAEG;AACH,MAAa,cAAc;IAI1B,YAAY,OAAgB,EAAE,OAAgB;QAC7C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACxB,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,GAAW,EAAE,OAAmB;QACvC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;IAED;;OAEG;IACH,cAAc;QACb,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,cAAc,CAAC,CAAC;IACnE,CAAC;IAED,IAAI,EAAE;QACL,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;IACzB,CAAC;CACD;AA5BD,wCA4BC","sourcesContent":["/**\n *  Copyright 2019 The Adaptive Web. All Rights Reserved.\n *\n *  Licensed under the Mozilla Public License 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *      https://www.mozilla.org/en-US/MPL/2.0/\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\nimport { Adapter } from './Adapter';\nimport { XHROptions, DOMService } from '../service';\nimport { Wrapper } from '../wrapper';\n\nexport interface IAdapterContext {\n\trequest(url: string, options: XHROptions): Promise<any>;\n\tgetPreferences(): Promise<any>;\n}\n\n/**\n * Adapter Context exposes a limited interface for adapters\n */\nexport class AdapterContext implements IAdapterContext {\n\tprivate wrapper: Wrapper;\n\tprivate adapter: Adapter;\n\n\tconstructor(wrapper: Wrapper, adapter: Adapter) {\n\t\tthis.wrapper = wrapper;\n\t\tthis.adapter = adapter;\n\t}\n\n\t/**\n\t * Sends a XHR (AJAX) request and returns it as a promise.\n\t * @param url the url to send the request to. Can contain interpolations.\n\t * @param options The options of the request.\n\t */\n\trequest(url: string, options: XHROptions): Promise<any> {\n\t\treturn this.wrapper.xhr.request(url, options);\n\t}\n\n\t/**\n\t * Returns the preferences of this adapter\n\t */\n\tgetPreferences(): Promise<any> {\n\t\treturn this.wrapper.storage.get(this.adapter.id + '/preferences');\n\t}\n\n\tget ui(): DOMService {\n\t\treturn this.wrapper.dom;\n\t}\n}\n"]}