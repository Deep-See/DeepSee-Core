{"version":3,"file":"AdapterContext.js","sourceRoot":"","sources":["../../src/adapter/AdapterContext.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;GAaG;;AAWH;;GAEG;AACH,MAAa,cAAc;IAKvB,YAAY,OAAgB,EAAE,OAAgB;QAC1C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAED;;;;QAII;IACJ,OAAO,CAAC,GAAW,EAAE,OAAmB;QACpC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,cAAc;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,cAAc,CAAC,CAAC;IACtE,CAAC;CAEJ;AA1BD,wCA0BC","sourcesContent":["/**\n *  Copyright 2019 The Adaptive Web. All Rights Reserved.\n * \n *  Licensed under the Mozilla Public License 2.0 (the \"License\"). \n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *  \n *      https://www.mozilla.org/en-US/MPL/2.0/\n *  \n *  or in the \"license\" file accompanying this file. This file is distributed \n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either \n *  express or implied. See the License for the specific language governing \n *  permissions and limitations under the License.\n */\n\nimport { Adapter } from './Adapter';\nimport { XHROptions } from '../service';\nimport { Wrapper } from '../wrapper';\n\nexport interface IAdapterContext {\n    request(url: string, options: XHROptions): Promise<any>;\n    getPreferences(): Promise<any>;\n}\n\n/**\n * Adapter Context exposes a limited interface for adapters\n */\nexport class AdapterContext implements IAdapterContext {\n\n    private wrapper: Wrapper;\n    private adapter: Adapter;\n\n    constructor(wrapper: Wrapper, adapter: Adapter) {\n        this.wrapper = wrapper;\n        this.adapter = adapter;\n    }\n\n    /**\n      * Sends a XHR (AJAX) request and returns it as a promise.\n      * @param url the url to send the request to. Can contain interpolations.\n      * @param options The options of the request.\n      */\n    request(url: string, options: XHROptions): Promise<any> {\n        return this.wrapper.xhr.request(url, options);\n    }\n\n    /**\n     * Returns the preferences of this adapter\n     */\n    getPreferences(): Promise<any> {\n        return this.wrapper.storage.get(this.adapter.id + '/preferences');\n    }\n\n}"]}