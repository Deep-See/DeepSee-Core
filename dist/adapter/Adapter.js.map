{"version":3,"file":"Adapter.js","sourceRoot":"","sources":["../../src/adapter/Adapter.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;GAaG;;AAKH;;GAEG;AACH,MAAa,OAAO;IA2BhB,YAAY,IAAY,EACZ,IAAY,EACZ,WAAmB,EACnB,OAAe,EACf,MAAc,EACd,mBAA4C,EAAE;QAV1D;;WAEG;QACH,WAAM,GAAW,EAAE,CAAC;QAShB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,EAAkB;QACtB,CAAC,UAAS,EAAkB,EAAE,SAAiB,EAAE,MAAc;YAC3D,IAAI,CAAC,SAAS,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAChC,CAAC;CAEJ;AAnDD,0BAmDC","sourcesContent":["/**\n *  Copyright 2019 The Adaptive Web. All Rights Reserved.\n * \n *  Licensed under the Mozilla Public License 2.0 (the \"License\"). \n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *  \n *      https://www.mozilla.org/en-US/MPL/2.0/\n *  \n *  or in the \"license\" file accompanying this file. This file is distributed \n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either \n *  express or implied. See the License for the specific language governing \n *  permissions and limitations under the License.\n */\n\nimport { AdapterContext } from './AdapterContext';\nimport { AdapterPreferenceSchema } from './AdapterPreferenceSchema';\n\n/**\n * Adapters are adaptive modules to be injected into the page.\n */\nexport class Adapter {\n\n    /**\n     * The universally unique identifier (UUID) of this adapter.\n     */\n    uuid: string;\n    /**\n     * The name of the adapter.\n     */\n    name: string;\n    /**\n     * A user friendly description of this adapter.\n     */\n    description: string;\n    /**\n     * The version string.\n     */\n    version: string;\n    /**\n     * The preference schema for this adapter.\n     */\n    preferenceSchema: AdapterPreferenceSchema;\n    /**\n     * The script itself. Represented as a string to allow for an eval call after being injected into the page.\n     */\n    script: string = '';\n\n    constructor(uuid: string,\n                name: string,\n                description: string,\n                version: string,\n                script: string,\n                preferenceSchema: AdapterPreferenceSchema = {}\n                ) {\n        this.uuid = uuid;\n        this.name = name;\n        this.description = description;\n        this.version = version;\n        this.script = script;\n        this.preferenceSchema = preferenceSchema;\n    }\n    \n    /**\n     * Executes the adapter code.\n     */\n    execute(aw: AdapterContext) {\n        (function(aw: AdapterContext, rawScript: string, window: Window) { \n            eval(rawScript); \n        })(aw, this.script, window);\n    }\n\n}"]}