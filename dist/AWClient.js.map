{"version":3,"file":"AWClient.js","sourceRoot":"","sources":["../src/AWClient.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;GAaG;;AAIH,6DAA0D;AAE1D;;GAEG;AACH,MAAa,QAAQ;IAKjB,YAAY,OAAgB;QAFpB,aAAQ,GAAiC,EAAE,CAAC;QAGhD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAED,IAAI;QACA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,QAAa,EAAE,EAAE;YAC/D,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACH,gBAAgB,CAAC,UAAe;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,gBAAgB;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,WAAW;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,iBAAiB,CAAC,OAAgB;QAC9B,OAAO,IAAI,+BAAc,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,OAAgB,EAAE,UAAmB,KAAK;QACpD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,IAAI,CAAC,OAAO,EAAE;gBACjH,MAAM,CAAC,4BAA4B,OAAO,CAAC,IAAI,aAAa,OAAO,CAAC,OAAO,wBAAwB,CAAC,CAAC;aACxG;iBAAM;gBACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;gBACtC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAEpD,yCAAyC;gBACzC,IAAI,WAAW,GAAQ,EAAE,CAAC;gBAC1B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oBAChD,WAAW,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;gBAC7D,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;gBACtD,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACvB,OAAO;aACV;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,IAAY;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACH,qBAAqB,CAAC,IAAY,EAAE,WAAgB;QAChD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,cAAc,EAAE,WAAW,CAAC,CAAC;IACjE,CAAC;CAEJ;AAvFD,4BAuFC","sourcesContent":["/**\n *  Copyright 2019 The Adaptive Web. All Rights Reserved.\n * \n *  Licensed under the Mozilla Public License 2.0 (the \"License\"). \n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *  \n *      https://www.mozilla.org/en-US/MPL/2.0/\n *  \n *  or in the \"license\" file accompanying this file. This file is distributed \n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either \n *  express or implied. See the License for the specific language governing \n *  permissions and limitations under the License.\n */\n\nimport { Wrapper } from \"./wrapper\";\nimport { Adapter } from \"./adapter/Adapter\";\nimport { AdapterContext } from './adapter/AdapterContext';\n\n/**\n * Maintains application state.\n */\nexport class AWClient {\n\n    private wrapper: Wrapper;\n    private adapters: { [uuid: string]:  Adapter } = {};\n\n    constructor(wrapper: Wrapper) {\n        this.wrapper = wrapper;   \n    }\n\n    init(): Promise<any> {\n        return this.wrapper.storage.get('adapters').then((adapters: any) => {\n            this.adapters = adapters || {};\n        });\n    }\n\n    /**\n     * Saves global options (used by the configuration site and interacting with awcli)\n     * @param newOptions the options to save\n     */\n    setGlobalOptions(newOptions: any): Promise<any> {\n        return this.wrapper.storage.set('globalOptions', newOptions);\n    }\n\n    /**\n     * Fetch the global options.\n     */\n    getGlobalOptions(): Promise<any> {\n        return this.wrapper.storage.get('globalOptions');\n    }\n\n    /**\n     * Get the adapters\n     */\n    getAdapters() {\n        return this.adapters;\n    }\n\n    /**\n     * Returns a new AdapterContext.\n     * @param adapter the adapter to generate an AdapterContext for\n     */\n    getAdapterContext(adapter: Adapter) {\n        return new AdapterContext(this.wrapper, adapter);\n    }\n\n    /**\n     * Attaches an adapter\n     * @param adapter the adapter to attach\n     */\n    attachAdapter(adapter: Adapter, replace: boolean = false): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            if (this.adapters[adapter.uuid] != undefined && this.adapters[adapter.uuid].version === adapter.version && !replace) {\n                reject(`An adapter with the UUID ${adapter.uuid} (version ${adapter.version}) is already attached.`);\n            } else {\n                this.adapters[adapter.uuid] = adapter;\n                this.wrapper.storage.set('adapters', this.adapters);\n\n                // Set this adapter's default preferences\n                let preferences: any = {};\n                Object.keys(adapter.preferenceSchema).forEach(key => {\n                    preferences[key] = adapter.preferenceSchema[key].default;\n                });\n                this.setAdapterPreferences(adapter.uuid, preferences);\n                resolve(this.adapters);\n                return;\n            }\n        })\n    }\n\n    /**\n     * Detach an adapter\n     * @param uuid the uuid of the adapter to detach\n     */\n    detachAdapter(uuid: string) {\n        delete this.adapters[uuid];\n        this.wrapper.storage.set('adapters', this.adapters);\n    }\n\n    /**\n     * Sets the preferences for an adapter\n     * @param uuid the uuid of the adapter\n     * @param preferences the preferences to set\n     */\n    setAdapterPreferences(uuid: string, preferences: any) {\n        this.wrapper.storage.set(uuid + '/preferences', preferences);\n    }\n\n}"]}