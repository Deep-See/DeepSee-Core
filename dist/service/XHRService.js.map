{"version":3,"file":"XHRService.js","sourceRoot":"","sources":["../../src/service/XHRService.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;GAaG;;AAcH;;GAEG;AACH,MAAa,UAAU;IA4CtB,YAAY,UAAe,EAAE;QA3C7B;;;;WAIG;QACH,WAAM,GAAW,KAAK,CAAC;QAiBvB;;WAEG;QACH,oBAAe,GAAa,KAAK,CAAC;QAKlC;;WAEG;QACH,cAAS,GAAa,IAAI,CAAC,SAAS,CAAC;QACrC;;WAEG;QACH,gBAAW,GAAa,IAAI,CAAC,KAAK,CAAC;QAOlC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC;QACtC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC;QAC/B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,KAAK,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC;QACrD,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,CAAC;QACrD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI;YACjC,cAAc,EAAE,iCAAiC;YACjD,MAAM,EAAE,0BAA0B;SAClC,CAAC;IACH,CAAC;IAED;;;;;;;;;OASG;IACH,mBAAmB,CAAC,GAAW;QAC9B,IAAI,IAAI,CAAC,IAAI,YAAY,IAAI,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ;YAAE,OAAO,GAAG,CAAC;QAC3E,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,GAAW,EAAE,EAAE;YAC9C,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE;gBAChC,IAAI,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC9B,GAAG,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;gBACrD,IAAI,KAAK,GAAW,IAAI,MAAM,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;gBAC/C,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBAC9B,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAQ,IAAI,CAAC,IAAK,CAAC,GAAG,CAAC,CAAC,CAAC;gBACtD,CAAC,CAAC,CAAC;aACH;QACF,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACZ,CAAC;CACD;AApFD,gCAoFC","sourcesContent":["/**\n *  Copyright 2019 The Adaptive Web. All Rights Reserved.\n *\n *  Licensed under the Mozilla Public License 2.0 (the \"License\").\n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *\n *      https://www.mozilla.org/en-US/MPL/2.0/\n *\n *  or in the \"license\" file accompanying this file. This file is distributed\n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n *  express or implied. See the License for the specific language governing\n *  permissions and limitations under the License.\n */\n\n/**\n * Makes XHR (aka AJAX) requests and returns a promise.\n */\nexport interface XHRService {\n\t/**\n\t * Sends a XHR (AJAX) request and returns a promise.\n\t * @param url the url to send the request to. Can contain interpolations.\n\t * @param options The options of the request.\n\t */\n\trequest(url: string, options: XHROptions | Object): Promise<any>;\n}\n\n/**\n * Contains options for an XHR request\n */\nexport class XHROptions {\n\t/**\n\t * The HTTP method to use. Allowed values are GET, POST, PUT, PATCH, DELETE, HEAD, or OPTIONS.\n\t *\n\t * Defaults to GET.\n\t */\n\tmethod: string = 'GET';\n\t/**\n\t * Data to be serialized into the querystring (for GET requests) or body for other methods.\n\t */\n\tdata: Blob | string | { [key: string]: any };\n\t/**\n\t * Whether the request should be sent asynchronously. Defaults to true.\n\t */\n\tasync: boolean;\n\t/**\n\t * The username for HTTP authorization.\n\t */\n\tuser?: string;\n\t/**\n\t * The password for HTTP authorization.\n\t */\n\tpassword?: string;\n\t/**\n\t * Whether to send cookies to 3rd party domains. Defaults to false.\n\t */\n\twithCredentials?: boolean = false;\n\t/**\n\t * The amount of milliseconds a request can take before automatically being terminated.\n\t */\n\ttimeout?: number;\n\t/**\n\t * The method used to serialize data. Defaults to JSON.stringify.\n\t */\n\tserialize: Function = JSON.stringify;\n\t/**\n\t * The method used to deserialize data. Defaults to JSON.parse.\n\t */\n\tdeserialize: Function = JSON.parse;\n\t/**\n\t * Content type\n\t */\n\theaders: { [key: string]: string };\n\n\tconstructor(options: any = {}) {\n\t\tthis.method = options.method || 'GET';\n\t\tthis.data = options.data || {};\n\t\tthis.async = options.async || true;\n\t\tthis.user = options.user;\n\t\tthis.password = options.password;\n\t\tthis.withCredentials = options.withCredentials || false;\n\t\tthis.timeout = options.timeout;\n\t\tthis.serialize = options.serialize || JSON.stringify;\n\t\tthis.deserialize = options.deserialize || JSON.parse;\n\t\tthis.headers = options.headers || {\n\t\t\t'Content-Type': 'application/json; charset=utf-8',\n\t\t\tAccept: 'application/json, text/*'\n\t\t};\n\t}\n\n\t/**\n\t * Encodes url parameters based on the data set.\n\t *\n\t * For example, given the url \"/profile/:id\", and data set to\n\t * { id: '123' }, this function will return \"/profile/123\".\n\t *\n\t * If the data is a string, it will be encoded directly, or if\n\t * the\n\t * @param url the url to encode\n\t */\n\tencodeUrlParameters(url: string): string {\n\t\tif (this.data instanceof Blob || typeof this.data === 'string') return url;\n\t\tObject.keys(this.data).forEach((key: string) => {\n\t\t\tif (url.indexOf(':' + key) >= 0) {\n\t\t\t\tlet segments = url.split('/');\n\t\t\t\turl = `${segments[0]}/${segments[1]}/${segments[2]}`;\n\t\t\t\tlet regex: RegExp = new RegExp(':' + key, 'g');\n\t\t\t\tsegments.splice(3).forEach(x => {\n\t\t\t\t\turl += '/' + x.replace(regex, (<any>this.data)[key]);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\treturn url;\n\t}\n}\n"]}