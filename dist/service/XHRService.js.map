{"version":3,"file":"XHRService.js","sourceRoot":"","sources":["../../src/service/XHRService.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;GAaG;;AAgBH;;GAEG;AACH,MAAa,UAAU;IAAvB;QAEI;;;;WAIG;QACH,WAAM,GAAW,KAAK,CAAC;QAKvB;;WAEG;QACH,UAAK,GAAa,IAAI,CAAC;QASvB;;WAEG;QACH,oBAAe,GAAa,KAAK,CAAC;QAKlC;;WAEG;QACH,cAAS,GAAa,IAAI,CAAC,SAAS,CAAC;QACrC;;WAEG;QACH,gBAAW,GAAa,IAAI,CAAC,KAAK,CAAC;IA0BvC,CAAC;IAxBG;;;;;;;;;OASG;IACH,mBAAmB,CAAC,GAAW;QAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,GAAW,EAAE,EAAE;YAC3C,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC7B,IAAI,KAAK,GAAW,IAAI,MAAM,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;gBAC/C,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;oBACpC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC5C;qBAAM;oBACH,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC5D;aACJ;QACL,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACf,CAAC;CAEJ;AAjED,gCAiEC","sourcesContent":["/**\n *  Copyright 2019 The Adaptive Web. All Rights Reserved.\n * \n *  Licensed under the Mozilla Public License 2.0 (the \"License\"). \n *  You may not use this file except in compliance with the License.\n *  A copy of the License is located at\n *  \n *      https://www.mozilla.org/en-US/MPL/2.0/\n *  \n *  or in the \"license\" file accompanying this file. This file is distributed \n *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either \n *  express or implied. See the License for the specific language governing \n *  permissions and limitations under the License.\n */\n\n/**\n * Makes XHR (aka AJAX) requests and returns a promise.\n */\nexport interface XHRService {\n\n    /**\n     * Sends a XHR (AJAX) request and returns a promise.\n     * @param url the url to send the request to. Can contain interpolations.\n     * @param options The options of the request.\n     */\n   request(url: string, options: XHROptions): Promise<any>;\n\n}\n\n/**\n * Contains options for an XHR request\n */\nexport class XHROptions {\n\n    /**\n     * The HTTP method to use. Allowed values are GET, POST, PUT, PATCH, DELETE, HEAD, or OPTIONS.\n     * \n     * Defaults to GET.\n     */\n    method: string = 'GET';\n    /**\n     * Data to be serialized into the querystring (for GET requests) or body for other methods.\n     */\n    [data: string]: any;\n    /**\n     * Whether the request should be sent asynchronously. Defaults to true.\n     */\n    async?: boolean = true;\n    /**\n     * The username for HTTP authorization.\n     */\n    user?: string;\n    /**\n     * The password for HTTP authorization.\n     */\n    password?: string;\n    /**\n     * Whether to send cookies to 3rd party domains. Defaults to false.\n     */\n    withCredentials?: boolean = false;\n    /**\n     * The amount of milliseconds a request can take before automatically being terminated.\n     */\n    timeout?: number;\n    /**\n     * The method used to serialize data. Defaults to JSON.stringify.\n     */\n    serialize: Function = JSON.stringify;\n    /**\n     * The method used to deserialize data. Defaults to JSON.parse.\n     */\n    deserialize: Function = JSON.parse;\n\n    /**\n     * Encodes url parameters based on the data set.\n     * \n     * For example, given the url \"/profile/:id\", and data set to\n     * { id: '123' }, this function will return \"/profile/123\".\n     * \n     * If the data is a string, it will be encoded directly, or if\n     * the \n     * @param url the url to encode\n     */\n    encodeUrlParameters(url: string): string {\n        Object.keys(this.data).forEach((key: string) => {\n            if (url.indexOf(':' + key) >= 0) {\n                let regex: RegExp = new RegExp(':' + key, 'g');\n                if (typeof this.data[key] === 'string') {\n                    url = url.replace(regex, this.data[key]);\n                } else {\n                    url = url.replace(regex, this.serialize(this.data[key]));\n                }\n            }\n        });\n        return url;\n    }\n\n}"]}